buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.neoforged.net/releases' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.neoforged', name: 'NeoGradle', version: '6.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7.+'
        classpath group: 'net.kyori', name: 'indra-git', version: '3.+'
    }
}
apply plugin: 'net.neoforged.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'net.kyori.indra.git'

group = project.maven_group

def commitHash = !indraGit.isPresent() ? "unknown" : indraGit.commit().abbreviate(7).name()
if (System.env.CI == "true") {
    def branch = System.env.GITHUB_REF
    branch = branch.substring(branch.lastIndexOf("/") + 1)
    def runNumber = System.env.GITHUB_RUN_NUMBER
    version = "${project.mod_version}-${project.minecraft_version}".replace("-SNAPSHOT", "+a${runNumber}-${branch}.${commitHash}")
} else {
    version = "${project.mod_version}-${project.minecraft_version}".replace("-SNAPSHOT", "-${commitHash}")
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17) // Mojang ships Java 17 to end users, so your mod should target Java 17.

repositories {
    maven {
        name "KosmX's maven"
        url 'https://maven.kosmx.dev/'
    }
    maven { url = 'https://maven.minecraftforge.net' }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    mavenCentral()
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: project.mappings_channel, version: project.mappings_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            arg "-mixin.config=splatcraft.mixins.json"
            jvmArg "-XX:+AllowEnhancedClassRedefinition"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                splatcraft {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('server')
            arg "-mixin.config=splatcraft.mixins.json"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'

            args 'nogui'

            mods {
                splatcraft {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            args '--mod', project.archives_base_name, '--all', '--output', file('src/generated/resources/')

            mods {
                splatcraft {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "splatcraft.refmap.json"
}

jarJar.enable()

dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:0.2.0"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.2.0")) {
        jarJar.ranged(it, "[0.2.0,)")
    }

    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
    implementation 'org.jetbrains:annotations:23.0.0'

    //implementation fg.deobf("software.bernie.geckolib:geckolib-forge-${project.geckolib_version}")
    //implementation fg.deobf("dev.kosmx.player-anim:player-animation-lib-forge:${project.player_anim_version}")
    compileOnly fg.deobf("curse.maven:rubidium-574856:4494903")
    //implementation fg.deobf("curse.maven:rubidium-574856:4494903")
}

tasks.named('build').configure { dependsOn('jarJar') }

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "MixinConfigs"            : "splatcraft.mixins.json",
                "Specification-Title"     : project.archives_base_name,
                "Specification-Vendor"    : project.author,
                "Specification-Version"   : "${version}",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : project.author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
}
